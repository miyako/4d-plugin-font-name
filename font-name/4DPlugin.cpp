/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : font-name
 #	author : miyako
 #	2017/05/18
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Font

		case 1 :
			FONT_Convert_name(pResult, pParams);
			break;

	}
}

// ------------------------------------- Font -------------------------------------

void to_display_name(C_TEXT &from, C_TEXT &to)
{
	NSString *src = from.copyUTF16String();
	NSFont *font = [NSFont fontWithName:src size:0.0];
	if(font)
		to.setUTF16String([font displayName]);
	
	[src release];
}

void from_display_name(C_TEXT &from, C_TEXT &to)
{
	NSString *src = from.copyUTF16String();
	NSFont *font = [NSFont fontWithName:src size:0.0];
	if(font)
	{
		to.setUTF16String([font fontName]);
	}else
	{
		//fallback method
		static NSArray *names = [[NSFontManager sharedFontManager] availableFonts];
		NSUInteger i = [names indexOfObjectPassingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop)
		{
			NSFont *f = [NSFont fontWithName:(NSString *)obj size:0.0];
			if(f)
			{
				if ([[f displayName]isEqualToString:src])
				{
					return YES;
				}
			}
			return NO;
		}];
		if(NSNotFound != i)
		{
			to.setUTF16String([names objectAtIndex:i]);
		}
	}
	
	[src release];
}

#define To_display_name 0
#define From_display_name 1

void FONT_Convert_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	switch (Param2.getIntValue())
	{
  case To_display_name:
			to_display_name(Param1, returnValue);
			break;

  default:
			from_display_name(Param1, returnValue);
			break;
	}

	returnValue.setReturn(pResult);
}

